{"version":3,"sources":["layout/_global.scss","utils/_config.scss","elements/_icons.scss","components/_nav-primary.scss","components/_nav-secondary.scss","components/_nav-tertiary.scss","../../../node_modules/sass-mq/_mq.scss","components/_wrapper.scss","components/_bookmarks.scss","components/_timeline.scss","_shame.scss"],"names":[],"mappings":"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","file":"app.css","sourcesContent":["body {\n  color: color(charcoal);\n  background: color(off-white);\n}\n\n","$brand-colors: (\n    primary: (\n        lighter: #f1f4f6,\n        light: #d4e2ea,\n        default: #7dabc4,\n    ),\n    secondary: (\n        default: #734989,\n    ),\n    charcoal: (\n        default: #505050,\n    ),\n    off-white: (\n        light: #fcfcfc,\n        default: #f9f9fa,\n        dark: #dfdfdf,\n    ),\n);\n\n$z-index-levels: (\n    wrapper: 999,\n);\n\n$mq-responsive: true;\n\n$mq-breakpoints: (\n    small:  320px,\n    medium:  740px,\n    large: 980px,\n    xlarge:    1300px,\n);\n\n$mq-static-breakpoint: desktop;\n",".fa-inbox {\n    font-size: 115%;\n    transform: translate3d(-12%, 0, 0);\n}\n",".navbar-fixed-top {\n  background: color(off-white);\n}\n",".navbar-default {\n    height: 100%;\n    background: -webkit-linear-gradient(top, color(primary) 0%, color(off-white) 30%);\n}\n",".nav-tertiary {\n    margin-top: 4rem;\n    border-bottom: thin solid color(off-white, dark);\n    padding: 0;\n\n    @include mq(large) {\n       display: flex;\n    }\n}\n\n.nav-tertiary__item {\n    list-style: none;\n    background: white;\n    display: flex;\n    border: color(off-white, dark) thin solid;\n    border-bottom: 0;\n\n    @include mq(large) {\n        &:not(:first-child) {\n            border-left: 0;\n        }\n    }\n}\n\n.nav-tertiary__link {\n    padding: 1rem 1.5rem;\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","#page-wrapper {\n  background: color(off-white);\n  z-index: z-index(wrapper);\n  border-left: 1px solid color(off-white, dark);\n\n  margin: 50px 0 0 300px;\n  padding: 40px 40px;\n  overflow-y: auto;\n\n  @include mq(large) {\n    padding: 40px 80px;\n  }\n}\n",".bookmark {\n  position: fixed;\n  top: 45px;\n  right: 70px;\n  font-size: 7em;\n  transform: scale(0.6, 1.0);\n  color: #734989;\n  opacity: 0.2;\n  text-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.bookmark.active,\n.bookmark:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\nnav .glyphicon-bookmark {\n  position: relative;\n  top: 2px;\n}\n",".vertical-timeline-content {\n    border: thin solid color(primary, light);\n    background: color(primary, lighter);\n}\n","/*\n *\n *   INSPINIA - Responsive Admin Theme\n *   NAME - GLASS BOX SKIN\n *\n*/\n\n// Main colors\n$blank-box-skin-color: #4a7f98;\n$blank-box-skin-nav-bg: #efefef;\n$blank-box-skin-a-color: #3d3d3d;\n$blank-box-skin-page-bg: #f4f6fa;\n\n\n.blank-box-skin .navbar-top-links li:last-child {\n  margin-right: 30px;\n}\n\n.blank-box-skin.fixed-nav .minimalize-styl-2 {\n  margin: 14px 5px 5px 15px;\n}\n\n.blank-box-skin .spin-icon {\n  background: $blank-box-skin-color !important;\n}\n\n.blank-box-skin .nav-default {\n  height:100%\n}\n\n.blank-box-skin .nav-header {\n  background: transparent;\n}\n\n.blank-box-skin.mini-navbar .nav-second-level {\n  background: $blank-box-skin-nav-bg;\n}\n\n.blank-box-skin .breadcrumb {\n  background: transparent;\n}\n\n.blank-box-skin .page-heading {\n  border: none;\n}\n\n.blank-box-skin .nav > li > a {\n  color: $blank-box-skin-a-color;\n}\n\n.blank-box-skin .navbar-minimalize {\n  background: $blank-box-skin-color;\n  border-color: $blank-box-skin-color;\n}\n\n.blank-box-skin .navbar-static-top {\n  background: #ffffff;\n}\n\n.blank-box-skin .dashboard-header {\n  background: transparent;\n  border-bottom: none !important;\n  border-top: none;\n  padding: 20px 30px 10px 30px;\n}\n\n.fixed-nav.blank-box-skin .navbar-fixed-top {\n  background: #fff;\n}\n\n.blank-box-skin .wrapper-content {\n  padding: 30px 15px;\n}\n\n.blank-box-skin .ibox-title, .blank-box-skin .ibox-content {\n  border-width: 1px;\n}\n\n.blank-box-skin .ibox-content:last-child {\n  border-style: solid solid solid solid;\n}\n\n.blank-box-skin .nav:not(.nav-second-level) > li.active {\n  border-left: none;\n  color:#222;\n  background: rgba(255, 255, 255, 0.64);\n}\n\n.blank-box-skin .nav-header a.dropdown-toggle {\n  color: #fff;\n  margin-top: 10px;\n}\n\n.blank-box-skin .nav-header a.dropdown-toggle .text-muted {\n  color: #fff;\n  opacity: 0.8;\n}\n\n.blank-box-skin .profile-element {\n  text-align: center;\n}\n\n.blank-box-skin .img-circle {\n  border-radius: 5px;\n}\n\n.blank-box-skin .navbar-default .nav li > a:hover,\n.blank-box-skin .navbar-default .nav li > a:focus,\n.blank-box-skin .navbar-default .nav li > a:active {\n  background: rgba(255, 255, 255, 0.64);\n  color: #222;\n}\n\n.blank-box-skin .navbar-default .nav li:not(.active) > li > a:hover,\n.blank-box-skin .navbar-default .nav li:not(.active) > li > a:focus,\n.blank-box-skin .navbar-default .nav li:not(.active) > li > a:active {\n  background: darken($blank-box-skin-nav-bg, 5%);\n  color: #fff;\n}\n\n.blank-box-skin .navbar-default .nav-second-level > li > a:hover {\n  color: #fff;\n}\n\n.blank-box-skin .navbar-default .nav-second-level > li > a:focus {\n  background: darken($blank-box-skin-nav-bg, 5%);\n  color: #fff;\n}\n\n.blank-box-skin .nav.nav-tabs > li.active > a {\n  color: #555;\n}\n\n.blank-box-skin .nav.nav-tabs > li.active {\n  background: transparent;\n}\n\n.blank-box-skin .nav li a {\n  color: #3d3d3d !important;\n}\n\n.blank-box-skin .nav-header span {\n    color: #303030;\n}\n\n.blank-box-skin .nav-header {\n  border-bottom-color: none;\n}\n\n\n.blank-box-skin .btn-primary.btn-outline {\n  color: $blank-box-skin-color;\n}\n\n.blank-box-skin .btn-primary {\n  background-color: $blank-box-skin-color;\n  border-color: $blank-box-skin-color;\n}\n\n.blank-box-skin .btn-primary:hover, .blank-box-skin .btn-primary:focus, .blank-box-skin .btn-primary:active, .blank-box-skin .btn-primary.active, .blank-box-skin .open .dropdown-toggle .btn-primary, .blank-box-skin .btn-primary:active:focus, .blank-box-skin .btn-primary:active:hover, .blank-box-skin .btn-primary.active:hover, .blank-box-skin .btn-primary.active:focus {\n  background-color: darken($blank-box-skin-color, 3%);\n  border-color: darken($blank-box-skin-color, 3%);\n}\n\n.blank-box-skin .btn-primary.disabled, .blank-box-skin .btn-primary.disabled:hover, .blank-box-skin .btn-primary.disabled:focus, .blank-box-skin .btn-primary.disabled:active, .blank-box-skin .btn-primary.disabled.active, .blank-box-skin .btn-primary[disabled], .blank-box-skin .btn-primary[disabled]:hover, .blank-box-skin .btn-primary[disabled]:focus, .blank-box-skin .btn-primary[disabled]:active, .blank-box-skin .btn-primary.active[disabled], .blank-box-skin fieldset[disabled] .btn-primary, .blank-box-skin fieldset[disabled] .btn-primary:hover, .blank-box-skin fieldset[disabled] .btn-primary:focus, .blank-box-skin fieldset[disabled] .btn-primary:active, .blank-box-skin fieldset[disabled] .btn-primary.active {\n  background-color: lighten($blank-box-skin-color, 4%);\n  border-color: lighten($blank-box-skin-color, 4%);\n}\n\n\n.blank-box-skin .btn-link:hover, .blank-box-skin .btn-link:focus, .blank-box-skin .btn-link:active, .blank-box-skin .btn-link.active, .blank-box-skin .open .dropdown-toggle.btn-link {\n  color: $blank-box-skin-color;\n}\n\n.blank-box-skin button.btn-primary.dim {\n  box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 5px 0 0 darken($blank-box-skin-color, 6%), 0 10px 5px #999;\n  -mox-box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 5px 0 0 darken($blank-box-skin-color, 6%), 0 10px 5px #999;\n  -webkit-box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 5px 0 0 darken($blank-box-skin-color, 6%), 0 10px 5px #999;\n}\n\n.blank-box-skin button.btn-primary.dim:active {\n  box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 2px 0 0 darken($blank-box-skin-color, 6%), 0 5px 3px #999;\n  -mox-box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 2px 0 0 darken($blank-box-skin-color, 6%), 0 5px 3px #999;\n  -webkit-box-shadow: inset 0 0 0 darken($blank-box-skin-color, 6%), 0 2px 0 0 darken($blank-box-skin-color, 6%), 0 5px 3px #999;\n}\n\n.blank-box-skin .label-primary, .blank-box-skin .badge-primary {\n  background-color: $blank-box-skin-color;\n  color: #FFFFFF;\n}\n\n.nav-second-level li.active {\n  border-left:none;\n  border-top: solid 1px #fff;\n  border-bottom: solid 1px #fff;\n  background-color: darken($blank-box-skin-nav-bg, 3%);\n}\n\n.blank-box-skin .pace .pace-progress {\n  background: $blank-box-skin-color;\n}\n\n.blank-box-skin li.spacer hr {\n    border-color: darken($blank-box-skin-nav-bg, 8%);\n}\n\n.blank-box-skin li.spacer:first-child hr {\n    border-color: darken($blank-box-skin-nav-bg, 60%);\n}\n\n.blank-box-skin a:not(.btn),\n.blank-box-skin .green-text:not(.btn),\n.blank-box-skin a:visited:not(.btn) {\n  color: $blank-box-skin-color;\n}\n\n\n.blank-box-skin a:active:not(.btn),\n.blank-box-skin a:focus:not(.btn),\n.blank-box-skin a:hover:not(.btn) {\n  color: darken(#73a0b5, 3%);\n}\n\n.blank-box-skin .module-menu {\n  background-color: #edeff1;\n}\n\n.blank-box-skin .btn-white {\n  border-color: #8c7b80;\n}\n\n.blank-box-skin .navbar-header .add-new .fa-plus {\n    color: #73a0b5;\n}\n\n.blank-box-skin .logo-space a {\n    color: #4D5356 !important;\n}\n\n.blank-box-skin .dropdown.profile-element ul li a {\n  color: #3d3d3d;\n}\n"]}