-- MySQL dump 10.13  Distrib 5.6.19, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: blank_box
-- ------------------------------------------------------
-- Server version	5.6.19-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `badge_types`
--

DROP TABLE IF EXISTS `badge_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `badge_types` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `metric` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `badge_types`
--

LOCK TABLES `badge_types` WRITE;
/*!40000 ALTER TABLE `badge_types` DISABLE KEYS */;
INSERT INTO `badge_types` VALUES (1,'Pages Added','Earned for the number of pages added to a chapter','pagesSubmitted','2017-08-29 08:38:32','2017-08-29 08:38:32'),(2,'Pages Edited','Earned for the number of pages edited','pagesEdited','2017-08-29 08:38:32','2017-08-29 08:38:32'),(3,'Resources Added','Earned for the number of resources added to a project','resourcesSubmitted','2017-08-29 08:38:32','2017-08-29 08:38:32');
/*!40000 ALTER TABLE `badge_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `badges`
--

DROP TABLE IF EXISTS `badges`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `badges` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `badge_type_id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `level` int(11) NOT NULL,
  `metric_boundary` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `badges`
--

LOCK TABLES `badges` WRITE;
/*!40000 ALTER TABLE `badges` DISABLE KEYS */;
INSERT INTO `badges` VALUES (1,1,'Aspiring Author','Earned by submitting 1 page','/images/badges/workflows_bronze.png',1,1,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(2,1,'Amateur Author','Earned by submitting 10 pages','/images/badges/workflows_silver.png',2,10,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(3,1,'Avid Author','Earned by submitting 20 pages','/images/badges/workflows_gold.png',3,20,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(4,1,'Abundant Author','Earned by submitting 40 pages','/images/badges/workflows_platinum.png',4,40,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(5,3,'Resourceful Rogue','Earned by adding 1 resources','/images/badges/server_bronze.png',1,1,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(6,3,'Resourceful Rapscallion','Earned by adding 20 resources','/images/badges/server_silver.png',2,10,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(7,3,'Resourceful Racketeer','Earned by adding 40 resources','/images/badges/server_gold.png',3,30,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(8,3,'Resourceful Renegade','Earned by adding 80 resources','/images/badges/server_platinum.png',4,50,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(9,2,'Editor with a Cause','Earned by editing 1 page','/images/badges/support_bronze.png',1,1,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(10,2,'Editor with a Motive','Earned by editing 10 pages','/images/badges/support_silver.png',2,10,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(11,2,'Editor with a Mission','Earned by editing 20 pages','/images/badges/support_gold.png',3,20,'2016-09-30 14:47:33','2016-09-30 14:47:33'),(12,2,'Editor with a Gun','Earned by editing 40 pages','/images/badges/support_platinum.png',4,40,'2016-09-30 14:47:33','2016-09-30 14:47:33');
/*!40000 ALTER TABLE `badges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookmarks`
--

DROP TABLE IF EXISTS `bookmarks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookmarks` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `category_id` int(11) NOT NULL,
  `chapter_id` int(11) NOT NULL,
  `page_id` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookmarks`
--

LOCK TABLES `bookmarks` WRITE;
/*!40000 ALTER TABLE `bookmarks` DISABLE KEYS */;
/*!40000 ALTER TABLE `bookmarks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `order` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'Mr B & Friends','General chapters go here.','mr-b-and-friends',1,'2017-03-26 17:47:11','2017-03-26 17:47:11'),(2,'Digital: Plugin','Chapters about the Mr B & Friends Wordpress functionality plugin go here','mr-b-plugin',2,NULL,NULL),(3,'Digital: Theme','Chapters about the Mr B & Friends theme go here','mr-b-theme',3,NULL,NULL);
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `chapters`
--

DROP TABLE IF EXISTS `chapters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `chapters` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `order` int(11) NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `projects_chapter` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chapters`
--

LOCK TABLES `chapters` WRITE;
/*!40000 ALTER TABLE `chapters` DISABLE KEYS */;
INSERT INTO `chapters` VALUES (1,1,'Projects','Projects go here',1,'projects','2017-08-25 12:26:15','2017-08-25 12:26:15',1),(3,2,'Services','Some services exist in the functionality plugin which are used throughout but may also be useful elsewhere. This chapter is about those.',3,'services','2017-08-25 13:03:46','2017-08-25 13:03:46',0),(4,2,'General','The general chapter is the place to put stuff unrelated to other chapters.',1,'general','2017-08-25 13:24:23','2017-08-25 13:24:23',0),(5,2,'Module: Custom Post Types','This chapter describes how to utilise Custom Post Types from the plugin in your project',4,'custom-post-types','2017-08-25 13:45:02','2017-08-25 13:45:02',0),(6,2,'Module: Ajax Endpoints','This chapter describes how to use the AjaxEndpoints module to implement plugin ajax in your project',4,'module-ajax-endpoints','2017-08-25 13:46:39','2017-08-25 13:46:39',0);
/*!40000 ALTER TABLE `chapters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feed_event_types`
--

DROP TABLE IF EXISTS `feed_event_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `feed_event_types` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `text` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `feed_event_types`
--

LOCK TABLES `feed_event_types` WRITE;
/*!40000 ALTER TABLE `feed_event_types` DISABLE KEYS */;
INSERT INTO `feed_event_types` VALUES (1,'Page Added','%s added a new page to the %s chapter!<br><br><small>%s</small>','2017-08-25 13:11:48','2017-08-25 13:11:48'),(2,'Badge Earned','%s earned the %s badge!','2017-08-25 16:35:43','2017-08-25 16:35:43');
/*!40000 ALTER TABLE `feed_event_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feed_events`
--

DROP TABLE IF EXISTS `feed_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `feed_events` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `feed_event_type_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `resource_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `feed_events`
--

LOCK TABLES `feed_events` WRITE;
/*!40000 ALTER TABLE `feed_events` DISABLE KEYS */;
INSERT INTO `feed_events` VALUES (1,1,2,1,'2017-08-25 13:12:51','2017-08-25 13:12:51'),(2,1,2,6,'2017-08-25 13:26:37','2017-08-25 13:26:37'),(3,1,2,7,'2017-08-25 13:27:34','2017-08-25 13:27:34'),(4,1,2,8,'2017-08-25 13:28:55','2017-08-25 13:28:55'),(5,1,2,9,'2017-08-25 13:31:12','2017-08-25 13:31:12'),(6,1,2,10,'2017-08-25 13:33:10','2017-08-25 13:33:10'),(7,1,2,11,'2017-08-25 13:35:14','2017-08-25 13:35:14'),(8,1,2,12,'2017-08-25 13:36:16','2017-08-25 13:36:16'),(9,1,2,13,'2017-08-25 13:39:53','2017-08-25 13:39:53'),(10,1,2,14,'2017-08-25 15:15:07','2017-08-25 15:15:07'),(11,1,2,15,'2017-08-25 15:31:21','2017-08-25 15:31:21'),(12,1,2,16,'2017-08-25 15:55:33','2017-08-25 15:55:33'),(13,1,2,17,'2017-08-25 15:56:37','2017-08-25 15:56:37'),(14,1,2,19,'2017-08-25 16:35:45','2017-08-25 16:35:45'),(15,2,2,2,'2017-08-25 16:53:18','2017-08-25 16:53:18'),(16,2,2,3,'2017-08-25 16:53:18','2017-08-25 16:53:18'),(17,1,2,20,'2017-08-25 16:53:18','2017-08-25 16:53:18'),(18,2,2,1,'2017-08-29 08:51:45','2017-08-29 08:51:45'),(19,1,2,23,'2017-08-29 08:51:45','2017-08-29 08:51:45'),(20,2,2,5,'2017-08-29 08:52:38','2017-08-29 08:52:38'),(21,2,2,6,'2017-08-29 09:48:59','2017-08-29 09:48:59');
/*!40000 ALTER TABLE `feed_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES ('2016_04_12_122915_create_chapters_table',1),('2016_04_12_122921_create_pages_table',1),('2016_04_13_155559_create_bookmarks_table',1),('2016_04_14_104113_create_categories_table',1),('2016_05_11_121058_create_page_drafts_table',1),('2016_05_12_105916_create_users_table',1),('2016_05_16_183941_create_suggested_edits_table',1),('2016_07_26_092122_create_slug_forwarding_settings_table',1),('2016_07_27_081745_create_badge_types_table',1),('2016_07_27_081800_create_badges_table',1),('2016_07_27_081805_create_user_badges_table',1),('2016_07_29_082105_create_page_tags_table',1),('2016_07_29_082134_create_tags_table',1),('2016_08_01_113952_create_feed_events_table',1),('2016_08_01_114024_create_feed_event_types_table',1),('2017_08_26_125629_add_project_to_chapters_table',2),('2017_08_26_135027_create_page_resources_table',2),('2017_08_26_141819_create_resource_types_table',2);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `page_drafts`
--

DROP TABLE IF EXISTS `page_drafts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `page_drafts` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `chapter_id` int(11) DEFAULT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `content` text COLLATE utf8_unicode_ci,
  `approved` tinyint(1) DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `page_drafts`
--

LOCK TABLES `page_drafts` WRITE;
/*!40000 ALTER TABLE `page_drafts` DISABLE KEYS */;
/*!40000 ALTER TABLE `page_drafts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `page_resources`
--

DROP TABLE IF EXISTS `page_resources`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `page_resources` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `page_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `type` text COLLATE utf8_unicode_ci,
  `content` text COLLATE utf8_unicode_ci,
  `created_by` int(11) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `page_resources`
--

LOCK TABLES `page_resources` WRITE;
/*!40000 ALTER TABLE `page_resources` DISABLE KEYS */;
INSERT INTO `page_resources` VALUES (1,23,'Developer','12','Stuart Nelson',2,'2017-08-29 08:52:37','2017-08-29 08:52:37'),(2,23,'Developer','12','Hannah Tinkler',2,'2017-08-29 08:52:43','2017-08-29 08:52:43'),(3,23,'User Stories','5','https://docs.google.com/spreadsheets/d/1-N4OvinMSaB4YHgghTqio9GuUp9osWzaoorvr10-ZMg/edit#gid=0',2,'2017-08-29 08:53:06','2017-08-29 08:53:06'),(4,23,'Digital\'s Progress Board','8','https://trello.com/b/NlUw6ed4/hoare-lea-website',2,'2017-08-29 08:53:29','2017-08-29 08:53:29'),(5,23,'Digital\'s Website Project','6','https://basecamp.com/1926511/projects/14309087',2,'2017-08-29 08:54:37','2017-08-29 08:54:37'),(6,23,'Final Design JPEGs','2','/Client_Work/Hoare Lea/2017/HO03247 Website Development/Creative/Design/Development/HL Final Designs/JPEG/Updated',2,'2017-08-29 08:56:33','2017-08-29 08:56:43'),(7,23,'Final Design PSDs','2','/Client_Work/Hoare Lea/2017/HO03247 Website Development/Creative/Design/Development/HL Final Designs/From Concept',2,'2017-08-29 08:57:29','2017-08-29 08:57:29'),(8,23,'Hoare Lea 2017 Repo','14','https://mrbandfriends.beanstalkapp.com/hoare-lea-website-2017',2,'2017-08-29 09:12:21','2017-08-29 09:53:00'),(9,23,'Credentials','7','Hoare Lea (Development)',2,'2017-08-29 09:16:34','2017-08-29 09:56:44'),(10,23,'Staging Site URL','9','http://hl.mrbandfriends-staging.co.uk/',2,'2017-08-29 09:48:59','2017-08-29 09:57:09');
/*!40000 ALTER TABLE `page_resources` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `page_tags`
--

DROP TABLE IF EXISTS `page_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `page_tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `page_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `page_tags`
--

LOCK TABLES `page_tags` WRITE;
/*!40000 ALTER TABLE `page_tags` DISABLE KEYS */;
/*!40000 ALTER TABLE `page_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `chapter_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `order` int(11) NOT NULL,
  `approved` tinyint(1) DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `pages`
--

LOCK TABLES `pages` WRITE;
/*!40000 ALTER TABLE `pages` DISABLE KEYS */;
INSERT INTO `pages` VALUES (1,6,'1. Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n**Example:**  \r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.','1-setting-up-the-ajaxendpoints-module',0,1,2,'2017-08-25 13:08:23','2017-08-25 15:17:36',NULL),(5,2,'\'CustomPostTypes\' Module','The CustomPostTypes module is used to set up...drumroll please...custom post types! Well, custom post types and any connections and taxonomies related to them.','The CustomPostTypes module is used to set up...drumroll please...custom post types! Well, custom post types and any connections and taxonomies related to them.\r\n\r\nContent here','customposttypes-module',0,1,2,'2017-08-25 13:25:36','2017-08-25 13:26:43','2017-08-25 13:26:43'),(6,5,'1. Setting Up the \'CustomPostTypes\' Module','The CustomPostTypes module is used to set up custom post types. Well, custom post types and any connections and taxonomies related to them.','The CustomPostTypes module assists in creating custom post types which your plugin can use to create and mine specific data. Setting up the CustomPostTypes module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerPostTypes()` method. The code for it should already be in the Core.php file however.\r\n\r\n**Example:**  \r\n```php\r\nprivate function registerPostTypes()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n		// Your individual CustomPostType classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate post type aliases, taxonomies and connections for your post types, however it does not provide any functionality. Please refer to [the \'Adding an CustomPostTypes Class\'](http://blank-box.app/p/mr-b-plugin/custom-post-types/2-adding-a-customposttype-class) page for more information on how to add individual custom post types.','1-setting-up-the-customposttypes-module',0,1,2,'2017-08-25 13:26:37','2017-08-25 15:33:48',NULL),(7,4,'Plugin Setup','This page describes how to set up the Mr B Plugin in a new Wordpress project.','The Mr B Wordpress Functionality Plugin is designed to be a starting point to providing custom functionality in a Wordpress project. Among other peripheral functions, it provides a way to set up custom post types with taxonomies and connections, and a way to interact with the database. It\'s also pretty easy to set up!\r\n\r\nSo lets start:\r\n1. `cd` into your `plugins` directory (usually `/site/web/app/plugins`)\r\n1. Clone the `Mr B Plugin` repository and remove git references:\r\n    ```bash\r\n    git clone --depth=1. git@mrbandfriends.git.beanstalkapp.com:/mrbandfriends/mrb-wordpress-plugin-skeleton.git && rm -rf mrb-wordpress-plugin-skeleton/.git\r\n    ```\r\n1. Rename the plugin directory:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton PLUGIN_NAME_HERE\r\n    ```\r\n1. Rename the base plugin file:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton.php PLUGIN_NAME_HERE.php\r\n    ```\r\n1. Install Composer dependencies:\r\n    ```bash\r\n    composer install\r\n    ```\r\n1. Find and replace all existing namespace references (`MrBPlugin`) with a new namespace of your choice, e.g. you could replace `MrBPlugin` with `VictoriaHall` if working on Victoria Hall sites\r\n1. Activate the plugin from your Wordpress Admin \'Plugins\' menu, as well as the Posts-to-Posts plugin.','plugin-setup',0,1,2,'2017-08-25 13:27:34','2017-08-25 14:28:11',NULL),(8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```','classname-service',0,1,2,'2017-08-25 13:28:55','2017-08-25 14:54:53',NULL),(9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\n\r\n**Example:**\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:    \r\n\r\n**Example:**\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object.   \r\n**Returns:** constructors don\'t return anything, duh  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class  \r\n**Returns:** an array containing the posts retrieved by the previous query  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```','postcollection-service',0,1,2,'2017-08-25 13:31:12','2017-08-25 14:54:19',NULL),(10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `__construct(string $from, string $to, array $config = [])`:\r\n**Description:** This method retrieves the config array from the `getConfig()` method and passes it to the `p2p_register_connection_type` from the `jjgrainger/wp-custom-post-type-class` package  \r\n\r\n**Example:**\r\n```php\r\nnew PostToPostConnection(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n```\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.  \r\n**Returns:** an array of `p2p_register_connection_type` configuration options  \r\n\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```','posttopostconnection-service',0,1,2,'2017-08-25 13:33:10','2017-08-25 14:52:23',NULL),(11,3,'\'PostTypeQuerier\' Service','The PostTypeQuerier service acts as a database access layer between the plugin and the underlying Wordpress database. It provides access to data both on its own, and via PostType classes.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostTypeQuerier`\r\n\r\n\r\n### Dependencies:\r\n`WP_Post` (Wordpress 4.4.0)  \r\n`WP_Query` (Wordpress 4.7.0)  \r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection` (Mr B Plugin 2.0)\r\n    \r\n### Usage:\r\nThis class will be primarily used by PostType classes automatically, which means you can access its methods dynamically or statically via the post type class, e.g.\r\n```php\r\nExample::get();\r\nExample::limit(5)->get();\r\n```\r\n\r\nYou can however also use it on its own to retrieve data from the database. See the documentation for the `__construct()` method for more information.\r\n\r\n### Methods:\r\nThere are two types of PostTypeQuerier methods; fetching methods and modifier methods. Fetching methods will return a query result to you which you can then access data from, whereas modifier methods modify the query you are currently building. They do not return a result, so you must chain a \'fetching\' method like `get()` to the end to return the query result.\r\n\r\n#### `first()` :\r\n**Type:** Fetching   \r\n**Description**: This returns the first result only for your query string    \r\n**Returns:** a WP_Post object where the post type data can be accessed as properties  \r\n\r\n**Example:**\r\n```php\r\n$row = ConfigExample::first();\r\n$row->post_title;\r\n```\r\n\r\n#### `find(int $id)` :\r\n**Type:** Fetching  \r\n**Description:** When passed an ID of a post/post type, it will return the post with that ID  \r\n**Returns:** a WP_Post object where the post type data can be accessed as properties\r\n\r\n**Example:**\r\n```\r\nConfigExample::find(4);\r\necho $row->post_title;\r\n```\r\n\r\n#### `all()` :\r\n**Type:** Fetching  \r\n**Description:** This returns all results and does not allow use of modifier methods like `where()` or `limit()`   \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$all = ConfigExample::all();\r\n\r\nforeach ($all as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `paginate(int $count)` :\r\n**Type:** Fetching  \r\n**Description:** This returns the specified number of results and also enables the default Wordpress pagination. Total pages available can be accessed via the `pages` property.  \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$paginated = ConfigExample::paginate(20);\r\necho $paginated->pages;                     // 156\r\n\r\nforeach ($all as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `get(array $parameters)` :\r\n**Type:** Fetching  \r\n**Description:** This returns all results that match your query string  \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$rows = ConfigExample::get();\r\n\r\nforeach ($rows as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `where(array $parameters)`:\r\n**Type:** Modifier  \r\n**Description:** This filters the returned data by an array of parameters passed in. Each key in the array should be a column name or valid [WP_Post argument](https://www.billerickson.net/code/wp_query-arguments), and each corresponding value should be the string/integer you want to match it against. If the array contains more than one item, the `where` clauses will be evaluated with the \'AND\' operator (i.e. `WHERE title = \'Hello World!\' AND post_status = \'publish\'`)  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::where([\r\n    \'title\' => \'Hello World!\',\r\n    \'post_status\' => \'publish\',\r\n])->get();\r\n```\r\n\r\n#### `whereTaxonomy(array $parameters)`:\r\n**Type:** Modifier  \r\n**Description:** This filters the returned data by any taxonomies it belongs to via an array. Each key in the array should be a taxonomy name, and each corresponding value should be the string/integer you want to match it against. If the arry contains more than one item, the `where` clauses will be evaluated with the \'AND\' operator (i.e. `WHERE X AND Y`)  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods\r\n\r\n**Example:**\r\n```\r\nConfigExample::whereTaxonomy([\r\n    \'category\' => \'animals\',\r\n    \'post_status\' => \'horse\',\r\n])->get();\r\n```\r\n\r\n\r\n#### `limit(int $limit)` :\r\n**Type:** Modifier  \r\n**Description:** Limits the amount of results that will be returned  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::limit(5)->get();\r\n```\r\n\r\n#### `orderBy(string $column, string $direction = \'ASC\')`:\r\n**Type:** Modifier  \r\n**Description:** This orders the results to be returned by the column name and direction given. Valid directions are \'ASC\' (A-Z, 0-9) and \'DESC\' (Z-A, 9-0), but \'ASC\' will be used as a default. E.g.  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::orderBy(\'title\', \'ASC\')->get();\r\n```\r\n\r\n#### `connected(int $id, string $postType)` :\r\n**Type:** Modifier\r\n**Description:** Returns posts connected with the given post\r\n**Returns:** any of the given `$postTypes` that have been linked with the post of the `$id` given e.g.\r\n\r\n**Example:**\r\n```\r\nConfigExample::connected(5, \'animals\')->get();\r\n```\r\n','posttypequerier-service',0,1,2,'2017-08-25 13:35:14','2017-08-25 15:04:07',NULL),(12,3,'\'Text\' Service','The Text service facilitates manipulation of strings.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`\r\n\r\n### Dependencies:\r\n`sanitize_title_with_dashes` (Wordpress 1.2.0)\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `slugify(string $string)`:\r\n**Description:** this method splits PascalCased strings into space separated strings, replaces underscores with dashes and passes through WP\'s slugging function (helpfully called \'sanitize_title_with_dashes\')  \r\n**Returns:** a slugified string  \r\n\r\n**Example:**\r\n```php\r\necho Text::slugify(\'Some witches prefer_brooms\'); // \'some-witches-prefer-brooms\'\r\n```\r\n\r\n#### `toTitleCase(string $string)`:\r\n**Description:** this method converts any type of string to Title Case (upper case first letters with spaces)  \r\n**Returns:** a Title Cased string  \r\n\r\n**Example:**\r\n```php\r\necho Text::toTitleCase(\'Some witches prefer_brooms\'); // \'Some Witches Prefer Brooms\'\r\n```','text-service',0,1,2,'2017-08-25 13:36:16','2017-08-25 15:09:25',NULL),(13,4,'Troubleshooting','This page serves as a troubleshooting guide for anything plugin related.','* #### I am getting \'Unexpected Character\' errors:\r\n	Often you can fix this error by simply refreshing the page. It is not clear what causes this, but it tends to happen when part of the plugin code has been changed and subsequently reloaded in the browser very quickly after.','troubleshooting',0,1,2,'2017-08-25 13:39:52','2017-08-25 13:43:30',NULL),(14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n### 1. Create the class\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\n### 2. Tell the class what the AJAX response should be:\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n\r\n### 3. Register the new class with the AjaxEndpoint module in Core.php\r\nYou now need to make the AjaxEndpoint module aware that it should set up an endpoint for your new class. To do this, pass the new class as an argument into your module instantiation:\r\n\r\n**Example:**\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		\\MrBPlugin\\App\\AjaxEndpoints\\Search::class\r\n	);\r\n}\r\n```','2-adding-an-ajaxendpoint-class',0,1,2,'2017-08-25 15:15:07','2017-08-25 15:41:03',NULL),(15,5,'2. Adding a CustomPostType Class','Each Custom Post Type that you want to set up will require a registered CustomPostType class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\CustomPostTypes` class tells your plugin to initialise the CustomPostTypes module, you won\'t have any custom post types available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` which can configure and set your new post type.\r\n\r\n### 1. Create the class:\r\nLets invent a use case...we want a \'Projects\' post type. First we need to create our CustomPostType class. It should go into `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` directory. Give it a singular, PascalCased name that describes what the post type is, and paste the following boilerplate code into it:\r\n\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\CustomPostTypes;\r\n\r\nclass Project extends BasePostType\r\n{\r\n    //\r\n}\r\n\r\n```\r\n\r\n### 2. Configure your new post type (if necessary)\r\nBy default, the CustomPostTypes module will take care of all naming and configuration concerns, however sometimes it may be necessary to overwrite these defaults. You can customise the post type slug, terminology used for the post type, and the admin settings for it.\r\n\r\nTo customise the post type slug, you can create a `public static $name` property on the post type class. This should be a dash separated string and will be used to refer to the post type by the plugin.\r\n\r\n**Example:**\r\n```php\r\npublic static $name = \'my-projects\';\r\n```\r\n\r\nTo customise the terminology, you can create a `public static $terms` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $terms = [\r\n	\'post_type_name\'    => \'my-projects\', // Default \'project\'\r\n	\'singular\'          => \'My Project\', // Default \'Project\'\r\n	\'plural\'            => \'My Multiple Projects\', // Default \'Projects\'\r\n	\'slug\'              => \'my-projects\', // Default \'project\'\r\n];\r\n```\r\n	\r\nTo customise the admin settings for the post type, you can create a `public static $config` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $config = [\r\n	\'show_in_nav_menus\' => false, // Default true\r\n	\'hierarchical\'      => true, // Default false\r\n	\'supports\'          => [\'title\'], // Default also includes \'editor\', \'thumbnail\' and \'page-attributes\'\r\n	\'has_archive\'       => true, // Default false\r\n];\r\n```\r\n\r\n### 3. Add required taxonomies and post-to-post connections:\r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-taxonomies-on-post-types) for further information on how to define post type **taxonomies**.  \r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/4-defining-connections-on-post-types) for further information on how to define post-to-post **connections**.  \r\n\r\n### 4. Register the new class with the CustomPostTypes module in Core.php:\r\nNext you need to tell the CustomPostTypes module that it should initialise your specific custom post type. To do this, pass it as an argument into the CustomPostTypes initialisation in `Core::registerPostTypes()`.\r\n\r\n**Example:**\r\n```php\r\n	private function registerPostTypes()\r\n	{\r\n		new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n			\\MrBPlugin\\App\\CustomPostTypes\\Project::class\r\n		);\r\n	}\r\n```\r\n','2-adding-a-customposttype-class',0,1,2,'2017-08-25 15:31:20','2017-08-25 15:58:37',NULL),(16,5,'3. Defining Taxonomies on Post Types','Taxonomies are like custom tags which apply to one specific post type. Once created, you will be able to categorise posts of this type into the taxonomies, which can be handy for filtering later.','To define a taxonomy for a post type, you will need to add a `public static $taxonomies` property on your new post type class. It should be an array where each value is the singular form of the taxonomy name you want.\r\n\r\n**You can add just one:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\',\r\n];\r\n```\r\n\r\n**Or you can add multiple taxonomies:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\',\r\n	\'year\',\r\n];\r\n```\r\n\r\nAgain, the CustomPostType module will handle the configuration of taxonomies automatically, but in some cases you may with to override these defaults. You can do this by providing the taxonomy name as the array key and an array of the overrides as the value.\r\n\r\n**Overriding the defaults:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\' => [\r\n		\'plural\' => \'categories\',\r\n	],\r\n	\'year\',\r\n];\r\n```\r\n','3-defining-taxonomies-on-post-types',0,1,2,'2017-08-25 15:55:33','2017-08-25 16:04:23',NULL),(17,5,'4. Defining Connections on Post Types','Post-to-Post connections give you a way to connect posts of one type to posts of another. This can be handy for filtering or associating later.','To define a connection for a post type, you will need to add a `public static $connections` property on your new post type class. It should be an array where each value is fully qualified namespace of the class for the post type you want to connect to.\r\n\r\n**You can add just one:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n];\r\n```\r\n\r\n**Or you can add multiple connections:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n	\\MrBPlugin\\App\\CustomPostTypes\\AnotherExample::class\r\n];\r\n```\r\n\r\nAgain, the CustomPostType module will handle the configuration of connections automatically, but in some cases you may with to override these defaults. You can do this by providing the connection classname as the array key and an array of the overrides as the value.\r\n\r\n**Overriding the defaults:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class => [\r\n		\'name\'  => \'example_to_another_example\', // Default example_to_another-example\r\n		\'from\' => \'the_example\', // Default \'example\'\r\n		\'to\'  => \'another_of_the_examples\', // Default \'another-example\'\r\n		\'reciprocal\' => false, // Default true\r\n		\'sortable\' => false, // Default \'any\'\r\n	],\r\n];\r\n```\r\n\r\n**Note:** You only need to set up a connection in *one* of the two connected post type classes. Adding the connection to both post type classes will result in duplicate connection panels in the admin section for the post type. For example, to connect `Example` with `AnotherExample`, you only need to define the connection in one of those classes, _either_ `Example` _or_ `AnotherExample`.','4-defining-connections-on-post-types',0,1,2,'2017-08-25 15:56:37','2017-08-25 16:13:39',NULL),(18,4,'Sint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibus','Consequat Anim et est distinctio','Sint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibus','sint-tempor-dolor-duis-error-incidunt-nemo-fugiat-iusto-qui-aliquid-est-aperiam-pariatur-deserunt-in-ut-saepe-molestiae-voluptatibus',0,1,2,'2017-08-25 16:34:01','2017-08-25 16:35:53','2017-08-25 16:35:53'),(19,4,'Sint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibus','Consequat Anim et est distinctio','Sint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibusSint tempor dolor duis error incidunt nemo fugiat iusto qui aliquid est aperiam pariatur Deserunt in ut saepe molestiae voluptatibus','sint-tempor-dolor-duis-error-incidunt-nemo-fugiat-iusto-qui-aliquid-est-aperiam-pariatur-deserunt-in-ut-saepe-molestiae-voluptatibus-1',0,1,2,'2017-08-25 16:35:45','2017-08-25 16:35:48','2017-08-25 16:35:48'),(20,6,'Eos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamus','Sed nemo exercitation omnis atque','Eos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamusEos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamusEos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamusEos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamusEos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamusEos aliquid nobis ullam sequi numquam ut itaque qui amet dolore cillum elit error enim accusamus','eos-aliquid-nobis-ullam-sequi-numquam-ut-itaque-qui-amet-dolore-cillum-elit-error-enim-accusamus',0,1,2,'2017-08-25 16:53:18','2017-08-25 16:53:22','2017-08-25 16:53:22'),(23,1,'Hoare Lea','Hoare Lea is a British firm of consulting engineers specialising in mechanical, electrical and environmental engineering (building services engineering).','','hoare-lea-2',0,1,2,'2017-08-29 08:51:44','2017-08-29 08:51:44',NULL);
/*!40000 ALTER TABLE `pages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `resource_types`
--

DROP TABLE IF EXISTS `resource_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `resource_types` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `category` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `color` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `resource_types`
--

LOCK TABLES `resource_types` WRITE;
/*!40000 ALTER TABLE `resource_types` DISABLE KEYS */;
INSERT INTO `resource_types` VALUES (1,'Admin Server','Asset Locations','dabc28','2017-08-29 09:59:06','2017-08-29 09:59:06'),(2,'Design Server','Asset Locations','dabc28','2017-08-29 09:59:06','2017-08-29 09:59:06'),(3,'Spreadsheet','GoogleDocs','24ad28','2017-08-29 09:59:06','2017-08-29 09:59:06'),(4,'Slideshow','GoogleDocs','24ad28','2017-08-29 09:59:06','2017-08-29 09:59:06'),(5,'Document','GoogleDocs','24ad28','2017-08-29 09:59:06','2017-08-29 09:59:06'),(6,'Basecamp Project','Links','4BA2C9','2017-08-29 09:59:06','2017-08-29 09:59:06'),(7,'Development','LastPass Recordsß','D12F2E','2017-08-29 09:59:06','2017-08-29 09:59:06'),(8,'Trello Board','Links','4BA2C9','2017-08-29 09:59:06','2017-08-29 09:59:06'),(9,'Website - Other','Links','4BA2C9','2017-08-29 09:59:06','2017-08-29 09:59:06'),(10,'Client Services Team','People','8e39a3','2017-08-29 09:59:06','2017-08-29 09:59:06'),(11,'Creative Team','People','8e39a3','2017-08-29 09:59:06','2017-08-29 09:59:06'),(12,'Digital Team','People','8e39a3','2017-08-29 09:59:06','2017-08-29 09:59:06'),(13,'Strategy & Planning Team','People','8e39a3','2017-08-29 09:59:06','2017-08-29 09:59:06'),(14,'Beanstalk Repository','Links','4BA2C9','2017-08-29 09:59:06','2017-08-29 09:59:06'),(15,'Staging','LastPass Recordsß','D12F2E','2017-08-29 09:59:06','2017-08-29 09:59:06'),(16,'Production','LastPass Recordsß','D12F2E','2017-08-29 09:59:06','2017-08-29 09:59:06'),(17,'Other','LastPass Recordsß','D12F2E','2017-08-29 09:59:06','2017-08-29 09:59:06');
/*!40000 ALTER TABLE `resource_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `slug_forwarding_settings`
--

DROP TABLE IF EXISTS `slug_forwarding_settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `slug_forwarding_settings` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `old_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `new_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `slug_forwarding_settings`
--

LOCK TABLES `slug_forwarding_settings` WRITE;
/*!40000 ALTER TABLE `slug_forwarding_settings` DISABLE KEYS */;
INSERT INTO `slug_forwarding_settings` VALUES (1,'ajaxendpoints-module','1-setting-up-the-ajaxendpoints-module','2017-08-25 13:47:54','2017-08-25 15:17:36',NULL),(2,'the-ajaxendpoints-module-class','1-setting-up-the-ajaxendpoints-module','2017-08-25 13:48:09','2017-08-25 15:17:36',NULL),(3,'customposttypes-module-1','1-setting-up-the-customposttypes-module','2017-08-25 13:48:21','2017-08-25 15:33:48',NULL),(4,'setting-up-the-ajaxendpoints-module','1-setting-up-the-ajaxendpoints-module','2017-08-25 15:17:36','2017-08-25 15:17:36',NULL),(5,'adding-an-ajaxendpoint-class','2-adding-an-ajaxendpoint-class','2017-08-25 15:28:36','2017-08-25 15:28:36',NULL),(6,'setting-up-the-customposttypes-module','1-setting-up-the-customposttypes-module','2017-08-25 15:33:48','2017-08-25 15:33:48',NULL),(7,'3-defining-taxonomies-on-custom-post-types','3-defining-taxonomies-on-post-types','2017-08-25 15:56:56','2017-08-25 15:56:56',NULL),(8,'4-defining-connections-on-custom-post-types','4-defining-connections-on-post-types','2017-08-25 15:57:04','2017-08-25 15:57:04',NULL);
/*!40000 ALTER TABLE `slug_forwarding_settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `suggested_edits`
--

DROP TABLE IF EXISTS `suggested_edits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `suggested_edits` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `page_id` int(11) NOT NULL,
  `chapter_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `approved` tinyint(1) DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `tags` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `suggested_edits`
--

LOCK TABLES `suggested_edits` WRITE;
/*!40000 ALTER TABLE `suggested_edits` DISABLE KEYS */;
INSERT INTO `suggested_edits` VALUES (1,13,4,'Troubleshooting','This page serves as a troubleshooting guide for anything plugin related.','### I am getting \'Unexpected Character\' errors:\r\nOften you can fix this error by simply refreshing the page. It is not clear what causes this, but it tends to happen when part of the plugin code has been changed and subsequently reloaded in the browser very quickly after.',1,2,'2017-08-25 13:43:06','2017-08-25 13:43:06',NULL,'errors,unexpected character'),(2,13,4,'Troubleshooting','This page serves as a troubleshooting guide for anything plugin related.','#### I am getting \'Unexpected Character\' errors:\r\nOften you can fix this error by simply refreshing the page. It is not clear what causes this, but it tends to happen when part of the plugin code has been changed and subsequently reloaded in the browser very quickly after.',1,2,'2017-08-25 13:43:19','2017-08-25 13:43:19',NULL,'errors,unexpected character'),(3,13,4,'Troubleshooting','This page serves as a troubleshooting guide for anything plugin related.','* #### I am getting \'Unexpected Character\' errors:\r\n	Often you can fix this error by simply refreshing the page. It is not clear what causes this, but it tends to happen when part of the plugin code has been changed and subsequently reloaded in the browser very quickly after.',1,2,'2017-08-25 13:43:30','2017-08-25 13:43:30',NULL,'errors,unexpected character'),(4,1,6,'The \'AjaxEndpoints\' Module Class','The AjaxEndpoints module allows the configuration of ajax endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module allows the configuration of ajax endpoints, and delegation of their functionality to specific classes.\r\n\r\nMore content should go here.',1,2,'2017-08-25 13:47:54','2017-08-25 13:47:54',NULL,'ajax,endpoints,modules'),(5,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of ajax endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module allows the configuration of ajax endpoints, and delegation of their functionality to specific classes.\r\n\r\nMore content should go here.',1,2,'2017-08-25 13:48:09','2017-08-25 13:48:09',NULL,'ajax,endpoints,modules'),(6,6,5,'Setting Up the \'CustomPostTypes\' Module','The CustomPostTypes module is used to set up...drumroll please...custom post types! Well, custom post types and any connections and taxonomies related to them.','The CustomPostTypes module is used to set up...drumroll please...custom post types! Well, custom post types and any connections and taxonomies related to them.\r\n\r\nContent here',1,2,'2017-08-25 13:48:21','2017-08-25 13:48:21',NULL,'custom post types,modules,post types'),(7,7,4,'Plugin Setup','This page describes how to set up the Mr B Plugin in a new Wordpress project.','The Mr B Wordpress Functionality Plugin is designed to be a starting point to providing custom functionality in a Wordpress project. Among other peripheral functions, it provides a way to set up custom post types with taxonomies and connections, and a way to interact with the database. It\'s also pretty easy to set up! So lets start.\r\n\r\n1. `cd` into your `plugins` directory\r\n1. Clone the `Mr B Plugin` repository and remove git references:\r\n    ```\r\n    git clone --depth=1. git@mrbandfriends.git.beanstalkapp.com:/mrbandfriends/mrb-wordpress-plugin-skeleton.git && rm -rf mrb-  wordpress-plugin-skeleton/.git\r\n    ```\r\n1. Rename the plugin directory:\r\n\r\n    ```\r\n    mv mrb-wordpress-plugin-skeleton PLUGIN_NAME_HERE\r\n    ```\r\n1. Rename the base plugin file:\r\n    ```\r\n    mv mrb-wordpress-plugin-skeleton.php PLUGIN_NAME_HERE.php\r\n    ```\r\n1. Install Composer dependencies:\r\n\r\n    ```\r\n    composer install\r\n    ```\r\n1. Replace all existing namespace references (`MrBPlugin`) with a new namespace of your choice, e.g. you could replace `MrBPlugin` with `VictoriaHall` if working on Victoria Hall sites',1,2,'2017-08-25 13:52:19','2017-08-25 13:52:19',NULL,'plugin,setup'),(8,7,4,'Plugin Setup','This page describes how to set up the Mr B Plugin in a new Wordpress project.','The Mr B Wordpress Functionality Plugin is designed to be a starting point to providing custom functionality in a Wordpress project. Among other peripheral functions, it provides a way to set up custom post types with taxonomies and connections, and a way to interact with the database. It\'s also pretty easy to set up!\r\n\r\nSo lets start:\r\n1. `cd` into your `plugins` directory (usually `/site/web/app/plugins`)\r\n1. Clone the `Mr B Plugin` repository and remove git references:\r\n    ```\r\n    git clone --depth=1. git@mrbandfriends.git.beanstalkapp.com:/mrbandfriends/mrb-wordpress-plugin-skeleton.git && rm -rf mrb-wordpress-plugin-skeleton/.git\r\n    ```\r\n1. Rename the plugin directory:\r\n    ```\r\n    mv mrb-wordpress-plugin-skeleton PLUGIN_NAME_HERE\r\n    ```\r\n1. Rename the base plugin file:\r\n    ```\r\n    mv mrb-wordpress-plugin-skeleton.php PLUGIN_NAME_HERE.php\r\n    ```\r\n1. Install Composer dependencies:\r\n    ```\r\n    composer install\r\n    ```\r\n1. Find and replace all existing namespace references (`MrBPlugin`) with a new namespace of your choice, e.g. you could replace `MrBPlugin` with `VictoriaHall` if working on Victoria Hall sites\r\n1. Activate the plugin from your Wordpress Admin \'Plugins\' menu',1,2,'2017-08-25 13:59:11','2017-08-25 13:59:11',NULL,'plugin,setup'),(9,7,4,'Plugin Setup','This page describes how to set up the Mr B Plugin in a new Wordpress project.','The Mr B Wordpress Functionality Plugin is designed to be a starting point to providing custom functionality in a Wordpress project. Among other peripheral functions, it provides a way to set up custom post types with taxonomies and connections, and a way to interact with the database. It\'s also pretty easy to set up!\r\n\r\nSo lets start:\r\n1. `cd` into your `plugins` directory (usually `/site/web/app/plugins`)\r\n1. Clone the `Mr B Plugin` repository and remove git references:\r\n    ```bash\r\n    git clone --depth=1. git@mrbandfriends.git.beanstalkapp.com:/mrbandfriends/mrb-wordpress-plugin-skeleton.git && rm -rf mrb-wordpress-plugin-skeleton/.git\r\n    ```\r\n1. Rename the plugin directory:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton PLUGIN_NAME_HERE\r\n    ```\r\n1. Rename the base plugin file:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton.php PLUGIN_NAME_HERE.php\r\n    ```\r\n1. Install Composer dependencies:\r\n    ```bash\r\n    composer install\r\n    ```\r\n1. Find and replace all existing namespace references (`MrBPlugin`) with a new namespace of your choice, e.g. you could replace `MrBPlugin` with `VictoriaHall` if working on Victoria Hall sites\r\n1. Activate the plugin from your Wordpress Admin \'Plugins\' menu',1,2,'2017-08-25 13:59:34','2017-08-25 13:59:34',NULL,'plugin,setup'),(10,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','Fully Qualified Classname: YOUR_NAMESPACE_HERE\\App\\Services\\Classname;\r\nDependencies:\r\n* YOUR_NAMESPACE_HERE\\App\\Services\\Text',1,2,'2017-08-25 14:01:08','2017-08-25 14:01:08',NULL,'classname,services'),(11,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','Fully Qualified Classname: \r\n	* `YOUR_NAMESPACE_HERE\\App\\Services\\Classname;\r\n	\r\nDependencies:\r\n* YOUR_NAMESPACE_HERE\\App\\Services\\Text',1,2,'2017-08-25 14:01:27','2017-08-25 14:01:27',NULL,'classname,services'),(12,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','**Fully Qualified Classname: **\r\n* `YOUR_NAMESPACE_HERE\\App\\Services\\Classname;\r\n	\r\n**Dependencies:**\r\n* YOUR_NAMESPACE_HERE\\App\\Services\\Text',1,2,'2017-08-25 14:02:09','2017-08-25 14:02:09',NULL,'classname,services'),(13,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','## `YOUR_NAMESPACE_HERE\\App\\Services\\Classname`:\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:08:48','2017-08-25 14:08:48',NULL,'classname,services'),(14,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Using It:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:09:50','2017-08-25 14:09:50',NULL,'classname,services'),(15,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:10:02','2017-08-25 14:10:02',NULL,'classname,services'),(16,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text` (Mr B Plugin 2.0)\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:12:57','2017-08-25 14:12:57',NULL,'classname,services'),(17,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  - Mr B Plugin 2.0\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:13:08','2017-08-25 14:13:08',NULL,'classname,services'),(18,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:13:17','2017-08-25 14:13:17',NULL,'classname,services'),(19,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n	\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:13:17','2017-08-25 14:13:17',NULL,'classname,services'),(20,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)\r\n`ArrayIterator` (PHP 5, PHP 7)\r\n`IteratorAggregate` (PHP 5, PHP 7)\r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:  \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count;\r\n```\r\n\r\n### Methods:\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class\r\n**Returns:** an array containing the posts retrieved by the previous query\r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:22:18','2017-08-25 14:22:18',NULL,'collection,database,query,services'),(21,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:  \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count;\r\n```\r\n\r\n### Methods:\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class\r\n**Returns:** an array containing the posts retrieved by the previous query\r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:23:24','2017-08-25 14:23:24',NULL,'collection,database,query,services'),(22,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:  \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class\r\n**Returns:** an array containing the posts retrieved by the previous query\r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:24:03','2017-08-25 14:24:03',NULL,'collection,database,query,services'),(23,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:25:07','2017-08-25 14:25:07',NULL,'classname,services'),(24,7,4,'Plugin Setup','This page describes how to set up the Mr B Plugin in a new Wordpress project.','The Mr B Wordpress Functionality Plugin is designed to be a starting point to providing custom functionality in a Wordpress project. Among other peripheral functions, it provides a way to set up custom post types with taxonomies and connections, and a way to interact with the database. It\'s also pretty easy to set up!\r\n\r\nSo lets start:\r\n1. `cd` into your `plugins` directory (usually `/site/web/app/plugins`)\r\n1. Clone the `Mr B Plugin` repository and remove git references:\r\n    ```bash\r\n    git clone --depth=1. git@mrbandfriends.git.beanstalkapp.com:/mrbandfriends/mrb-wordpress-plugin-skeleton.git && rm -rf mrb-wordpress-plugin-skeleton/.git\r\n    ```\r\n1. Rename the plugin directory:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton PLUGIN_NAME_HERE\r\n    ```\r\n1. Rename the base plugin file:\r\n    ```bash\r\n    mv mrb-wordpress-plugin-skeleton.php PLUGIN_NAME_HERE.php\r\n    ```\r\n1. Install Composer dependencies:\r\n    ```bash\r\n    composer install\r\n    ```\r\n1. Find and replace all existing namespace references (`MrBPlugin`) with a new namespace of your choice, e.g. you could replace `MrBPlugin` with `VictoriaHall` if working on Victoria Hall sites\r\n1. Activate the plugin from your Wordpress Admin \'Plugins\' menu, as well as the Posts-to-Posts plugin.',1,2,'2017-08-25 14:28:11','2017-08-25 14:28:11',NULL,'plugin,setup'),(25,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)\r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.\r\n**Returns:** an array of `p2p_register_connection_type` configuration options\r\n\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example, [\'sortable\' => false\'];\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:33:25','2017-08-25 14:33:25',NULL,'jjgrainger,post connections,post to post,posts to posts'),(26,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.\r\n**Returns:** an array of `p2p_register_connection_type` configuration options\r\n\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example, [\'sortable\' => false\'];\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:33:32','2017-08-25 14:33:32',NULL,'jjgrainger,post connections,post to post,posts to posts'),(27,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:  \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object. \r\n**Returns:** constructors don\'t return anything, duh\r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class\r\n**Returns:** an array containing the posts retrieved by the previous query\r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:39:48','2017-08-25 14:39:48',NULL,'collection,database,query,services'),(28,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `__construct(string $from, string $to, array $config = [])`:\r\n**Description:** This method retrieves the config array from the `getConfig()` method and passes it to the `p2p_register_connection_type` from the `jjgrainger/wp-custom-post-type-class` package\r\n\r\n**Example:**\r\n```php\r\nnew PostToPostConnection(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n```\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.\r\n**Returns:** an array of `p2p_register_connection_type` configuration options\r\n\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:41:55','2017-08-25 14:41:55',NULL,'jjgrainger,post connections,post to post,posts to posts'),(29,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:46:19','2017-08-25 14:46:19',NULL,'classname,services'),(30,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:  \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object. \r\n**Returns:** constructors don\'t return anything, duh\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class\r\n**Returns:** an array containing the posts retrieved by the previous query\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:46:24','2017-08-25 14:46:24',NULL,'collection,database,query,services'),(31,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `__construct(string $from, string $to, array $config = [])`:\r\n**Description:** This method retrieves the config array from the `getConfig()` method and passes it to the `p2p_register_connection_type` from the `jjgrainger/wp-custom-post-type-class` package\r\n**Example:**\r\n```php\r\nnew PostToPostConnection(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n```\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.\r\n**Returns:** an array of `p2p_register_connection_type` configuration options\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:46:30','2017-08-25 14:46:30',NULL,'jjgrainger,post connections,post to post,posts to posts'),(32,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `__construct(string $from, string $to, array $config = [])`:\r\n**Description:** This method retrieves the config array from the `getConfig()` method and passes it to the `p2p_register_connection_type` from the `jjgrainger/wp-custom-post-type-class` package  \r\n**Example:**\r\n```php\r\nnew PostToPostConnection(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n```\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.  \r\n**Returns:** an array of `p2p_register_connection_type` configuration options  \r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:46:48','2017-08-25 14:46:48',NULL,'jjgrainger,post connections,post to post,posts to posts'),(33,10,3,'\'PostToPostConnection\' Service','The PostToPostConnection service is used by the CustomPostTypes module to set up post-to-post connections using jjgrainger\'s Posts-to-Posts package.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`jjgrainger/wp-custom-post-type-class` (Composer package)  \r\n`MrBPlugin\\App\\Services\\Classname` (Mr B Plugin 2.0)\r\n\r\n    \r\n### Usage:\r\nThis class probably shouldn\'t be used except for by the CustomPostType module class. In any case, newing it up will run all processes necessary for setting up a custom post type.\r\n\r\n### Methods:\r\n\r\n#### `__construct(string $from, string $to, array $config = [])`:\r\n**Description:** This method retrieves the config array from the `getConfig()` method and passes it to the `p2p_register_connection_type` from the `jjgrainger/wp-custom-post-type-class` package  \r\n\r\n**Example:**\r\n```php\r\nnew PostToPostConnection(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n```\r\n\r\n#### `getConfig(string $from, string $to, array $config = [])`:\r\n**Description:** This method builds a config array that can be used by `p2p_register_connection_type` to set up a custom post type. The `$to` and `$from` arguments should be in slug format. The `$config` array can be used to overwrite some of the default configuration options (such as `reciprocal` and `sortable`), or pass in additional ones.  \r\n**Returns:** an array of `p2p_register_connection_type` configuration options  \r\n\r\n**Example:**\r\n```php\r\n$config = $connection->getConfig(\'example\', \'another-example\', [\'sortable\' => false\']);\r\n\r\n/**\r\n * [\r\n *    \'name\'          => sprintf(example_to_another-example\', $from, $to),\r\n *    \'from\'          => $from,\r\n *    \'to\'            => $to,\r\n *    \'reciprocal\'    => true,\r\n *    \'sortable\'      => false\r\n * ]\r\n */\r\n    \r\n```',1,2,'2017-08-25 14:52:23','2017-08-25 14:52:23',NULL,'jjgrainger,post connections,post to post,posts to posts'),(34,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:    \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object.   \r\n\r\n**Returns:** constructors don\'t return anything, duh  \r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class  \r\n**Returns:** an array containing the posts retrieved by the previous query  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:53:38','2017-08-25 14:53:38',NULL,'collection,database,query,services'),(35,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\nExample:\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:    \r\nExample:\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object.   \r\n**Returns:** constructors don\'t return anything, duh  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class  \r\n**Returns:** an array containing the posts retrieved by the previous query  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:53:52','2017-08-25 14:53:52',NULL,'collection,database,query,services'),(36,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\n**Example:**\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:    \r\n**Example:**\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object.   \r\n**Returns:** constructors don\'t return anything, duh  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class  \r\n**Returns:** an array containing the posts retrieved by the previous query  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:54:06','2017-08-25 14:54:06',NULL,'collection,database,query,services'),(37,9,3,'\'PostCollection\' Service','The PostCollection holds an array of posts retrieved from the database by any of the PostType classes. It facilitates access and manipulation of the contained posts.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection`\r\n\r\n	\r\n### Dependencies:\r\n`WP_Query` (Wordpress 4.7.0)  \r\n`ArrayIterator` (PHP 5, PHP 7)  \r\n`IteratorAggregate` (PHP 5, PHP 7)  \r\n\r\n### Usage:\r\n#### Pagination:\r\nWhen paginating, you can get the total page count by accessing the `$pages` property, e.g.\r\n```php\r\necho $collection->pages; // 9\r\n```\r\n\r\n#### Iterating:\r\nYou can iterate over the posts contained by this object using any iteration construct, like `foreach`, `for`, and `while`. This is because it implements IteratorAggregate...nifty!  \r\n\r\n**Example:**\r\n```php\r\nforeach ($collection as $post) {\r\n    echo $post->post_title;\r\n    echo post->ID;\r\n}\r\n```\r\n\r\n#### Interacting with the underlying query object:\r\nYou can also chain any method onto this collection object to pass the method on to the underlying query, e.g.:    \r\n\r\n**Example:**\r\n```php\r\n$posts = $collection->posts;\r\necho $collection->post_count; // 20\r\n```\r\n\r\n### Methods:\r\n\r\n#### `__construct(WP_Query $query)`:\r\n**Description:** This method sets its `$query` property to the `$query` variable passed in and sets the `$page` property to the value of the `$max_num_pages` property of the `$query` object.   \r\n**Returns:** constructors don\'t return anything, duh  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n```\r\n\r\n#### `toArray()`:\r\n**Description:** This method returns all of the posts that is held by its `$query` property, as injected by a PostType class  \r\n**Returns:** an array containing the posts retrieved by the previous query  \r\n\r\n**Example:**\r\n```php\r\n$collection = new PostCollection($query);\r\n$array = $collection->toArray(); // [0 => WP_Post Object, 1 => WP_Post Object etc.]\r\n```',1,2,'2017-08-25 14:54:19','2017-08-25 14:54:19',NULL,'collection,database,query,services'),(38,8,3,'\'Classname\' Service','The Classname service facilitates the manipulation of fully qualified classnames.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Classname`\r\n\r\n\r\n### Dependencies:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`  (Mr B Plugin 2.0)\r\n\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `name(string $string)`:\r\n**Description:** This method returns the short classname for the fully qualified one passed in, i.e. the last segment.  \r\n**Returns:** a string containing the final segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'Example\'\r\n```\r\n\r\n#### `root(string $string)`:\r\n**Description:** This method returns the root of the for the fully qualified classname passed in, i.e. the first segment.  \r\n**Returns:** a string containing the first segment of the classname passed in  \r\n\r\n**Example:**\r\n```php\r\necho Classname::name(\'MrBPlugin\\App\\PostType\\Example\'); // \'MrBPlugin\'\r\n```',1,2,'2017-08-25 14:54:53','2017-08-25 14:54:53',NULL,'classname,services'),(39,11,3,'\'PostTypeQuerier\' Service','The PostTypeQuerier service acts as a database access layer between the plugin and the underlying Wordpress database. It provides access to data both on its own, and via PostType classes.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostTypeQuerier`\r\n\r\n\r\n### Dependencies:\r\n`WP_Post` (Wordpress 4.4.0)  \r\n`WP_Query` (Wordpress 4.7.0)  \r\n`YOUR_NAMESPACE_HERE\\App\\Services\\PostCollection` (Mr B Plugin 2.0)\r\n    \r\n### Usage:\r\nThis class will be primarily used by PostType classes automatically, which means you can access its methods dynamically or statically via the post type class, e.g.\r\n```php\r\nExample::get();\r\nExample::limit(5)->get();\r\n```\r\n\r\nYou can however also use it on its own to retrieve data from the database. See the documentation for the `__construct()` method for more information.\r\n\r\n### Methods:\r\nThere are two types of PostTypeQuerier methods; fetching methods and modifier methods. Fetching methods will return a query result to you which you can then access data from, whereas modifier methods modify the query you are currently building. They do not return a result, so you must chain a \'fetching\' method like `get()` to the end to return the query result.\r\n\r\n#### `first()` :\r\n**Type:** Fetching   \r\n**Description**: This returns the first result only for your query string    \r\n**Returns:** a WP_Post object where the post type data can be accessed as properties  \r\n\r\n**Example:**\r\n```php\r\n$row = ConfigExample::first();\r\n$row->post_title;\r\n```\r\n\r\n#### `find(int $id)` :\r\n**Type:** Fetching  \r\n**Description:** When passed an ID of a post/post type, it will return the post with that ID  \r\n**Returns:** a WP_Post object where the post type data can be accessed as properties\r\n\r\n**Example:**\r\n```\r\nConfigExample::find(4);\r\necho $row->post_title;\r\n```\r\n\r\n#### `all()` :\r\n**Type:** Fetching  \r\n**Description:** This returns all results and does not allow use of modifier methods like `where()` or `limit()`   \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$all = ConfigExample::all();\r\n\r\nforeach ($all as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `paginate(int $count)` :\r\n**Type:** Fetching  \r\n**Description:** This returns the specified number of results and also enables the default Wordpress pagination. Total pages available can be accessed via the `pages` property.  \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$paginated = ConfigExample::paginate(20);\r\necho $paginated->pages;                     // 156\r\n\r\nforeach ($all as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `get(array $parameters)` :\r\n**Type:** Fetching  \r\n**Description:** This returns all results that match your query string  \r\n**Returns:** an array of WP_Post objects, which can be iterated over, accessing the data as properties\r\n\r\n**Example:**\r\n```\r\n$rows = ConfigExample::get();\r\n\r\nforeach ($rows as $one) {\r\n    echo $one->post_title;\r\n}\r\n```\r\n\r\n#### `where(array $parameters)`:\r\n**Type:** Modifier  \r\n**Description:** This filters the returned data by an array of parameters passed in. Each key in the array should be a column name or valid [WP_Post argument](https://www.billerickson.net/code/wp_query-arguments), and each corresponding value should be the string/integer you want to match it against. If the array contains more than one item, the `where` clauses will be evaluated with the \'AND\' operator (i.e. `WHERE title = \'Hello World!\' AND post_status = \'publish\'`)  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::where([\r\n    \'title\' => \'Hello World!\',\r\n    \'post_status\' => \'publish\',\r\n])->get();\r\n```\r\n\r\n#### `whereTaxonomy(array $parameters)`:\r\n**Type:** Modifier  \r\n**Description:** This filters the returned data by any taxonomies it belongs to via an array. Each key in the array should be a taxonomy name, and each corresponding value should be the string/integer you want to match it against. If the arry contains more than one item, the `where` clauses will be evaluated with the \'AND\' operator (i.e. `WHERE X AND Y`)  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods\r\n\r\n**Example:**\r\n```\r\nConfigExample::whereTaxonomy([\r\n    \'category\' => \'animals\',\r\n    \'post_status\' => \'horse\',\r\n])->get();\r\n```\r\n\r\n\r\n#### `limit(int $limit)` :\r\n**Type:** Modifier  \r\n**Description:** Limits the amount of results that will be returned  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::limit(5)->get();\r\n```\r\n\r\n#### `orderBy(string $column, string $direction = \'ASC\')`:\r\n**Type:** Modifier  \r\n**Description:** This orders the results to be returned by the column name and direction given. Valid directions are \'ASC\' (A-Z, 0-9) and \'DESC\' (Z-A, 9-0), but \'ASC\' will be used as a default. E.g.  \r\n**Returns:** a PostTypeQuerier object from which you can chain additional \'fetching\' or \'modifier\' methods  \r\n\r\n**Example:**\r\n```\r\nConfigExample::orderBy(\'title\', \'ASC\')->get();\r\n```\r\n\r\n#### `connected(int $id, string $postType)` :\r\n**Type:** Modifier\r\n**Description:** Returns posts connected with the given post\r\n**Returns:** any of the given `$postTypes` that have been linked with the post of the `$id` given e.g.\r\n\r\n**Example:**\r\n```\r\nConfigExample::connected(5, \'animals\')->get();\r\n```\r\n',1,2,'2017-08-25 15:04:07','2017-08-25 15:04:07',NULL,'post types,querier,queries,query,services'),(40,12,3,'\'Text\' Service','The Text service facilitates manipulation of strings.','### Namespace:\r\n`YOUR_NAMESPACE_HERE\\App\\Services\\Text`\r\n\r\n### Dependencies:\r\n`sanitize_title_with_dashes` (Wordpress 1.2.0)\r\n	\r\n### Usage:\r\nThis class can be used by calling any of its methods statically.\r\n\r\n### Methods:\r\n\r\n#### `slugify(string $string)`:\r\n**Description:** this method splits PascalCased strings into space separated strings, replaces underscores with dashes and passes through WP\'s slugging function (helpfully called \'sanitize_title_with_dashes\')  \r\n**Returns:** a slugified string  \r\n\r\n**Example:**\r\n```php\r\necho Text::slugify(\'Some witches prefer_brooms\'); // \'some-witches-prefer-brooms\'\r\n```\r\n\r\n#### `toTitleCase(string $string)`:\r\n**Description:** this method converts any type of string to Title Case (upper case first letters with spaces)  \r\n**Returns:** a Title Cased string  \r\n\r\n**Example:**\r\n```php\r\necho Text::toTitleCase(\'Some witches prefer_brooms\'); // \'Some Witches Prefer Brooms\'\r\n```',1,2,'2017-08-25 15:09:25','2017-08-25 15:09:25',NULL,'services,slugify,text,title case'),(41,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n```php\r\n	/**\r\n	 * @return void\r\n	 */\r\n	private function registerAdditionalModules()\r\n	{\r\n			new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n					// Your individual AjaxEndpoint classes will go here\r\n			);\r\n	}\r\n```\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:16:25','2017-08-25 15:16:25',NULL,'ajax,endpoints,modules'),(42,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n		new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n				// Your individual AjaxEndpoint classes will go here\r\n		);\r\n}\r\n```\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:16:42','2017-08-25 15:16:42',NULL,'ajax,endpoints,modules'),(43,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n			// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:16:47','2017-08-25 15:16:47',NULL,'ajax,endpoints,modules'),(44,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:16:53','2017-08-25 15:16:53',NULL,'ajax,endpoints,modules'),(45,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:17:08','2017-08-25 15:17:08',NULL,'ajax,endpoints,modules'),(46,1,6,'Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n**Example:**  \r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:17:19','2017-08-25 15:17:19',NULL,'ajax,endpoints,modules'),(47,1,6,'1. Setting Up the \'AjaxEndpoints\' Module','The AjaxEndpoints module allows the configuration of AJAX endpoints, and delegation of their functionality to specific classes.','The AjaxEndpoints module assists in creating endpoints which your Javascript AJAX calls can talk to. Setting up the AjaxEndpoints module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerAdditionalModules()` method.\r\n\r\n**Example:**  \r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		// Your individual AjaxEndpoint classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate hooks for your endpoints, however it does not provide any functionality. Please refer to [the \'Adding an AjaxEndpoint Class\'](http://blank-box.app/p/mr-b-plugin/module-ajax-endpoints/adding-an-ajaxendpoint-class) page for more information on how to add individual endpoints.',1,2,'2017-08-25 15:17:36','2017-08-25 15:17:36',NULL,'ajax,endpoints,modules'),(48,14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n**Code:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n',1,2,'2017-08-25 15:28:36','2017-08-25 15:28:36',NULL,'ajax,endpoints,modules'),(49,6,5,'1. Setting Up the \'CustomPostTypes\' Module','The CustomPostTypes module is used to set up custom post types. Well, custom post types and any connections and taxonomies related to them.','The CustomPostTypes module assists in creating custom post types which your plugin can use to create and mine specific data. Setting up the CustomPostTypes module in its most basic form is simple, you just need to register the module in your plugin\'s `Core::registerPostTypes()` method. The code for it should already be in the Core.php file however.\r\n\r\n**Example:**  \r\n```php\r\nprivate function registerPostTypes()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n		// Your individual CustomPostType classes will go here\r\n	);\r\n}\r\n```\r\n\r\n\r\nThis will provide the ability to automatically register the appropriate post type aliases, taxonomies and connections for your post types, however it does not provide any functionality. Please refer to [the \'Adding an CustomPostTypes Class\'](http://blank-box.app/p/mr-b-plugin/custom-post-types/2-adding-a-customposttype-class) page for more information on how to add individual custom post types.',1,2,'2017-08-25 15:33:48','2017-08-25 15:33:48',NULL,'custom post types,modules,post types'),(50,14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n### 1. Create the class\r\n**Code:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\n### 2. Tell the class what the AJAX response should be:\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n\r\n### 3. Register the new class with the AjaxEndpoint module in Core.php\r\nYou now need to make the AjaxEndpoint module aware that it should set up an endpoint for your new class. To do this, pass the new class as an argument into your module instantiation:\r\n\r\n```php\r\n\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		\\MrBPlugin\\App\\AjaxEndpoints\\Search::class\r\n	);\r\n}\r\n```',1,2,'2017-08-25 15:40:14','2017-08-25 15:40:14',NULL,'ajax,endpoints,modules'),(51,14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n### 1. Create the class\r\n**Code:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\n### 2. Tell the class what the AJAX response should be:\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n\r\n### 3. Register the new class with the AjaxEndpoint module in Core.php\r\nYou now need to make the AjaxEndpoint module aware that it should set up an endpoint for your new class. To do this, pass the new class as an argument into your module instantiation:\r\n\r\n```php\r\n\r\n**Example:**\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		\\MrBPlugin\\App\\AjaxEndpoints\\Search::class\r\n	);\r\n}\r\n```',1,2,'2017-08-25 15:40:40','2017-08-25 15:40:40',NULL,'ajax,endpoints,modules'),(52,14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n### 1. Create the class\r\n**Code:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\n### 2. Tell the class what the AJAX response should be:\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n\r\n### 3. Register the new class with the AjaxEndpoint module in Core.php\r\nYou now need to make the AjaxEndpoint module aware that it should set up an endpoint for your new class. To do this, pass the new class as an argument into your module instantiation:\r\n\r\n**Example:**\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		\\MrBPlugin\\App\\AjaxEndpoints\\Search::class\r\n	);\r\n}\r\n```',1,2,'2017-08-25 15:40:54','2017-08-25 15:40:54',NULL,'ajax,endpoints,modules'),(53,14,6,'2. Adding an AjaxEndpoint Class','Each AJAX endpoint that you want to set up will require a registered AjaxEndpoint class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\AjaxEndpoint` tells your plugin to initialise the AjaxEndpoints module, you won\'t have any AJAX endpoints available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` which can retrieve and return the data needed.\r\n\r\nLets invent a use case...we want a \'search\' endpoint which will return any \'example\' post types with the search term in the title. First we need to create our AjaxEndpoint class. It should go into `/sites/web/app/plugins/plugin-name/app/AjaxEndpoints` directory. Give it a name that describes what it is doing, and paste the following boilerplate code into it:\r\n\r\n### 1. Create the class\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\AjaxEndpoints;\r\n\r\nuse MrBPlugin\\App\\CustomPostTypes\\Example;\r\n\r\nclass Search extends BaseAjaxEndpoint\r\n{\r\n    /**\r\n     * The slug for this ajax function, will be used to build the hook name\r\n     *\r\n     * @var string\r\n     */\r\n    public static $slug = \'search_endpoint\';\r\n\r\n    /**\r\n     * Returns data to the BaseAjaxEndpoint to be encoded for JSON response\r\n     *\r\n     * @return array\r\n     */\r\n    public function buildResponse() : array\r\n    {\r\n        // This is where we retrieve the data\r\n    }\r\n}\r\n```\r\n\r\nThe `$slug` property will be what you pass as the `action` parameter in the URL you send your AJAX request to, e.g. `/wp-admin/admin-ajax.php?action=search_endpoint`.\r\n\r\n### 2. Tell the class what the AJAX response should be:\r\nNext you need to populate the `buildResponse()` method with code that will retrieve the data you want to return. This data should be returned from the function in its **original format**, it should not be JSON encoded.\r\n\r\n**Example:**\r\n```php\r\npublic function buildResponse() : array\r\n{\r\n	return Example::where([\'post_title\' => $_GET[\'term\'])->get();\r\n}\r\n```\r\n\r\n### 3. Register the new class with the AjaxEndpoint module in Core.php\r\nYou now need to make the AjaxEndpoint module aware that it should set up an endpoint for your new class. To do this, pass the new class as an argument into your module instantiation:\r\n\r\n**Example:**\r\n```php\r\nprivate function registerAdditionalModules()\r\n{\r\n	new \\MrBPlugin\\App\\Modules\\AjaxEndpoints(\r\n		\\MrBPlugin\\App\\AjaxEndpoints\\Search::class\r\n	);\r\n}\r\n```',1,2,'2017-08-25 15:41:03','2017-08-25 15:41:03',NULL,'ajax,endpoints,modules'),(54,16,5,'3. Defining Taxonomies on Post Types','Taxonomies are like custom tags which apply to one specific post type. Once created, you will be able to categorise posts of this type into the taxonomies, which can be handy for filtering later.','Taxonomies are like custom tags which apply to one specific post type. Once created, you will be able to categorise posts of this type into the taxonomies, which can be handy for filtering later.',1,2,'2017-08-25 15:56:56','2017-08-25 15:56:56',NULL,'custom post types,post types,taxonomies,taxonomy'),(55,17,5,'4. Defining Connections on Post Types','Post-to-Post connections give you a way to connect posts of one type to posts of another. This can be handy for filtering or associating later.','Post-to-Post connections give you a way to connect posts of one type to posts of another. This can be handy for filtering or associating later.',1,2,'2017-08-25 15:57:04','2017-08-25 15:57:04',NULL,'custom post types,post types'),(56,15,5,'2. Adding a CustomPostType Class','Each Custom Post Type that you want to set up will require a registered CustomPostType class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\CustomPostTypes` class tells your plugin to initialise the CustomPostTypes module, you won\'t have any custom post types available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` which can configure and set your new post type.\r\n\r\n### 1. Create the class:\r\nLets invent a use case...we want a \'Projects\' post type. First we need to create our CustomPostType class. It should go into `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` directory. Give it a singular, PascalCased name that describes what the post type is, and paste the following boilerplate code into it:\r\n\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\CustomPostTypes;\r\n\r\nclass Project extends BasePostType\r\n{\r\n    //\r\n}\r\n\r\n```\r\n\r\n### 2. Configure your new post type (if necessary)\r\nBy default, the CustomPostTypes module will take care of all naming and configuration concerns, however sometimes it may be necessary to overwrite these defaults. You can customise the post type slug, terminology used for the post type, and the admin settings for it.\r\n\r\nTo customise the post type slug, you can create a `public static $name` property on the post type class. This should be a dash separated string and will be used to refer to the post type by the plugin.\r\n\r\n**Example:**\r\n```php\r\npublic static $name = \'my-projects\';\r\n```\r\n\r\nTo customise the terminology, you can create a `public static $terms` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $terms = [\r\n	\'post_type_name\'    => \'my-projects\', // Default \'project\'\r\n	\'singular\'          => \'My Project\', // Default \'Project\'\r\n	\'plural\'            => \'My Multiple Projects\', // Default \'Projects\'\r\n	\'slug\'              => \'my-projects\', // Default \'project\'\r\n];\r\n```\r\n	\r\nTo customise the admin settings for the post type, you can create a `public static $config` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $config = [\r\n	\'show_in_nav_menus\' => false, // Default true\r\n	\'hierarchical\'      => true, // Default false\r\n	\'supports\'          => [\'title\'], // Default also includes \'editor\', \'thumbnail\' and \'page-attributes\'\r\n	\'has_archive\'       => true, // Default false\r\n];\r\n```\r\n\r\n### 3. Add required taxonomies and post-to-post connections:\r\nFor further information on how to define post type taxonomies, [check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-taxonomies-on-post-types)  \r\n\r\nFor further information on how to define post-to-post connections, [check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-connections-on-post-types)  \r\n\r\n### 4. Register the new class with the CustomPostTypes module in Core.php:\r\nNext you need to tell the CustomPostTypes module that it should initialise your specific custom post type. To do this, pass it as an argument into the CustomPostTypes initialisation in `Core::registerPostTypes()`.\r\n\r\n**Example:**\r\n```php\r\n	private function registerPostTypes()\r\n	{\r\n		new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n			\\MrBPlugin\\App\\CustomPostTypes\\Project::class\r\n		);\r\n	}\r\n```\r\n',1,2,'2017-08-25 15:57:37','2017-08-25 15:57:37',NULL,'custom post types,modules'),(57,15,5,'2. Adding a CustomPostType Class','Each Custom Post Type that you want to set up will require a registered CustomPostType class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\CustomPostTypes` class tells your plugin to initialise the CustomPostTypes module, you won\'t have any custom post types available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` which can configure and set your new post type.\r\n\r\n### 1. Create the class:\r\nLets invent a use case...we want a \'Projects\' post type. First we need to create our CustomPostType class. It should go into `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` directory. Give it a singular, PascalCased name that describes what the post type is, and paste the following boilerplate code into it:\r\n\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\CustomPostTypes;\r\n\r\nclass Project extends BasePostType\r\n{\r\n    //\r\n}\r\n\r\n```\r\n\r\n### 2. Configure your new post type (if necessary)\r\nBy default, the CustomPostTypes module will take care of all naming and configuration concerns, however sometimes it may be necessary to overwrite these defaults. You can customise the post type slug, terminology used for the post type, and the admin settings for it.\r\n\r\nTo customise the post type slug, you can create a `public static $name` property on the post type class. This should be a dash separated string and will be used to refer to the post type by the plugin.\r\n\r\n**Example:**\r\n```php\r\npublic static $name = \'my-projects\';\r\n```\r\n\r\nTo customise the terminology, you can create a `public static $terms` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $terms = [\r\n	\'post_type_name\'    => \'my-projects\', // Default \'project\'\r\n	\'singular\'          => \'My Project\', // Default \'Project\'\r\n	\'plural\'            => \'My Multiple Projects\', // Default \'Projects\'\r\n	\'slug\'              => \'my-projects\', // Default \'project\'\r\n];\r\n```\r\n	\r\nTo customise the admin settings for the post type, you can create a `public static $config` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $config = [\r\n	\'show_in_nav_menus\' => false, // Default true\r\n	\'hierarchical\'      => true, // Default false\r\n	\'supports\'          => [\'title\'], // Default also includes \'editor\', \'thumbnail\' and \'page-attributes\'\r\n	\'has_archive\'       => true, // Default false\r\n];\r\n```\r\n\r\n### 3. Add required taxonomies and post-to-post connections:\r\nFor further information on how to define post type taxonomies, [check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-taxonomies-on-post-types)  \r\nFor further information on how to define post-to-post connections, [check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/4-defining-connections-on-post-types)  \r\n\r\n### 4. Register the new class with the CustomPostTypes module in Core.php:\r\nNext you need to tell the CustomPostTypes module that it should initialise your specific custom post type. To do this, pass it as an argument into the CustomPostTypes initialisation in `Core::registerPostTypes()`.\r\n\r\n**Example:**\r\n```php\r\n	private function registerPostTypes()\r\n	{\r\n		new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n			\\MrBPlugin\\App\\CustomPostTypes\\Project::class\r\n		);\r\n	}\r\n```\r\n',1,2,'2017-08-25 15:57:50','2017-08-25 15:57:50',NULL,'custom post types,modules'),(58,15,5,'2. Adding a CustomPostType Class','Each Custom Post Type that you want to set up will require a registered CustomPostType class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\CustomPostTypes` class tells your plugin to initialise the CustomPostTypes module, you won\'t have any custom post types available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` which can configure and set your new post type.\r\n\r\n### 1. Create the class:\r\nLets invent a use case...we want a \'Projects\' post type. First we need to create our CustomPostType class. It should go into `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` directory. Give it a singular, PascalCased name that describes what the post type is, and paste the following boilerplate code into it:\r\n\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\CustomPostTypes;\r\n\r\nclass Project extends BasePostType\r\n{\r\n    //\r\n}\r\n\r\n```\r\n\r\n### 2. Configure your new post type (if necessary)\r\nBy default, the CustomPostTypes module will take care of all naming and configuration concerns, however sometimes it may be necessary to overwrite these defaults. You can customise the post type slug, terminology used for the post type, and the admin settings for it.\r\n\r\nTo customise the post type slug, you can create a `public static $name` property on the post type class. This should be a dash separated string and will be used to refer to the post type by the plugin.\r\n\r\n**Example:**\r\n```php\r\npublic static $name = \'my-projects\';\r\n```\r\n\r\nTo customise the terminology, you can create a `public static $terms` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $terms = [\r\n	\'post_type_name\'    => \'my-projects\', // Default \'project\'\r\n	\'singular\'          => \'My Project\', // Default \'Project\'\r\n	\'plural\'            => \'My Multiple Projects\', // Default \'Projects\'\r\n	\'slug\'              => \'my-projects\', // Default \'project\'\r\n];\r\n```\r\n	\r\nTo customise the admin settings for the post type, you can create a `public static $config` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $config = [\r\n	\'show_in_nav_menus\' => false, // Default true\r\n	\'hierarchical\'      => true, // Default false\r\n	\'supports\'          => [\'title\'], // Default also includes \'editor\', \'thumbnail\' and \'page-attributes\'\r\n	\'has_archive\'       => true, // Default false\r\n];\r\n```\r\n\r\n### 3. Add required taxonomies and post-to-post connections:\r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-taxonomies-on-post-types) for further information on how to define post type taxonomies.  \r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/4-defining-connections-on-post-types) for further information on how to define post-to-post connections.  \r\n\r\n### 4. Register the new class with the CustomPostTypes module in Core.php:\r\nNext you need to tell the CustomPostTypes module that it should initialise your specific custom post type. To do this, pass it as an argument into the CustomPostTypes initialisation in `Core::registerPostTypes()`.\r\n\r\n**Example:**\r\n```php\r\n	private function registerPostTypes()\r\n	{\r\n		new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n			\\MrBPlugin\\App\\CustomPostTypes\\Project::class\r\n		);\r\n	}\r\n```\r\n',1,2,'2017-08-25 15:58:25','2017-08-25 15:58:25',NULL,'custom post types,modules'),(59,15,5,'2. Adding a CustomPostType Class','Each Custom Post Type that you want to set up will require a registered CustomPostType class. Here\'s how to create one!','Whilst the `MrBPlugin\\App\\Modules\\CustomPostTypes` class tells your plugin to initialise the CustomPostTypes module, you won\'t have any custom post types available to you until you create classes for each one. This will require adding a new file to `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` which can configure and set your new post type.\r\n\r\n### 1. Create the class:\r\nLets invent a use case...we want a \'Projects\' post type. First we need to create our CustomPostType class. It should go into `/sites/web/app/plugins/plugin-name/app/CustomPostTypes` directory. Give it a singular, PascalCased name that describes what the post type is, and paste the following boilerplate code into it:\r\n\r\n**Example:**\r\n```php\r\n<?php\r\n\r\nnamespace MrBPlugin\\App\\CustomPostTypes;\r\n\r\nclass Project extends BasePostType\r\n{\r\n    //\r\n}\r\n\r\n```\r\n\r\n### 2. Configure your new post type (if necessary)\r\nBy default, the CustomPostTypes module will take care of all naming and configuration concerns, however sometimes it may be necessary to overwrite these defaults. You can customise the post type slug, terminology used for the post type, and the admin settings for it.\r\n\r\nTo customise the post type slug, you can create a `public static $name` property on the post type class. This should be a dash separated string and will be used to refer to the post type by the plugin.\r\n\r\n**Example:**\r\n```php\r\npublic static $name = \'my-projects\';\r\n```\r\n\r\nTo customise the terminology, you can create a `public static $terms` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $terms = [\r\n	\'post_type_name\'    => \'my-projects\', // Default \'project\'\r\n	\'singular\'          => \'My Project\', // Default \'Project\'\r\n	\'plural\'            => \'My Multiple Projects\', // Default \'Projects\'\r\n	\'slug\'              => \'my-projects\', // Default \'project\'\r\n];\r\n```\r\n	\r\nTo customise the admin settings for the post type, you can create a `public static $config` property on the post type class. This should be an array, in which you can specify any of the following keys to override their defaults.\r\n\r\n**Example:**\r\n```php\r\npublic static $config = [\r\n	\'show_in_nav_menus\' => false, // Default true\r\n	\'hierarchical\'      => true, // Default false\r\n	\'supports\'          => [\'title\'], // Default also includes \'editor\', \'thumbnail\' and \'page-attributes\'\r\n	\'has_archive\'       => true, // Default false\r\n];\r\n```\r\n\r\n### 3. Add required taxonomies and post-to-post connections:\r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/3-defining-taxonomies-on-post-types) for further information on how to define post type **taxonomies**.  \r\n[Check out this page](http://blank-box.app/p/mr-b-plugin/custom-post-types/4-defining-connections-on-post-types) for further information on how to define post-to-post **connections**.  \r\n\r\n### 4. Register the new class with the CustomPostTypes module in Core.php:\r\nNext you need to tell the CustomPostTypes module that it should initialise your specific custom post type. To do this, pass it as an argument into the CustomPostTypes initialisation in `Core::registerPostTypes()`.\r\n\r\n**Example:**\r\n```php\r\n	private function registerPostTypes()\r\n	{\r\n		new \\MrBPlugin\\App\\Modules\\CustomPostTypes(\r\n			\\MrBPlugin\\App\\CustomPostTypes\\Project::class\r\n		);\r\n	}\r\n```\r\n',1,2,'2017-08-25 15:58:37','2017-08-25 15:58:37',NULL,'custom post types,modules'),(60,16,5,'3. Defining Taxonomies on Post Types','Taxonomies are like custom tags which apply to one specific post type. Once created, you will be able to categorise posts of this type into the taxonomies, which can be handy for filtering later.','To define a taxonomy for a post type, you will need to add a `public static $taxonomies` property on your new post type class. It should be an array where each value is the singular form of the taxonomy name you want.\r\n\r\n**You can add just one:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\',\r\n];\r\n```\r\n\r\n**Or you can add multiple taxonomies:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\',\r\n	\'year\',\r\n];\r\n```\r\n\r\nAgain, the CustomPostType module will handle the configuration of taxonomies automatically, but in some cases you may with to override these defaults. You can do this by providing the taxonomy name as the array key and an array of the overrides as the value.\r\n\r\n**Overriding the defaults:**\r\n```php\r\npublic static $taxonomies = [\r\n	\'category\' => [\r\n		\'plural\' => \'categories\',\r\n	],\r\n	\'year\',\r\n];\r\n```\r\n',1,2,'2017-08-25 16:04:23','2017-08-25 16:04:23',NULL,'custom post types,post types,taxonomies,taxonomy'),(61,17,5,'4. Defining Connections on Post Types','Post-to-Post connections give you a way to connect posts of one type to posts of another. This can be handy for filtering or associating later.','To define a connection for a post type, you will need to add a `public static $connections` property on your new post type class. It should be an array where each value is fully qualified namespace of the class for the post type you want to connect to.\r\n\r\n**You can add just one:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n];\r\n```\r\n\r\n**Or you can add multiple connections:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n	\\MrBPlugin\\App\\CustomPostTypes\\AnotherExample::class\r\n];\r\n```\r\n\r\nAgain, the CustomPostType module will handle the configuration of connections automatically, but in some cases you may with to override these defaults. You can do this by providing the connection classname as the array key and an array of the overrides as the value.\r\n\r\n**Overriding the defaults:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class => [\r\n		\'name\'  => \'example_to_another_example\', // Default example_to_another-example\r\n		\'from\' => \'the_example\', // Default \'example\'\r\n		\'to\'  => \'another_of_the_examples\', // Default \'another-example\'\r\n		\'reciprocal\' => false, // Default true\r\n		\'sortable\' => false, // Default \'any\'\r\n	],\r\n];\r\n```\r\n\r\n**Note:** You only need to set up a connection in *one* of the two connected post type classes. Adding the connection to both post type classes will result in duplicate connection panels in the admin section for the post type. For example, to connect `Example` with `AnotherExample`, yoiu only need to define the connection in one, _either_ `Example` _or_ `AnotherExample`.',1,2,'2017-08-25 16:12:49','2017-08-25 16:12:49',NULL,'custom post types,post types'),(62,17,5,'4. Defining Connections on Post Types','Post-to-Post connections give you a way to connect posts of one type to posts of another. This can be handy for filtering or associating later.','To define a connection for a post type, you will need to add a `public static $connections` property on your new post type class. It should be an array where each value is fully qualified namespace of the class for the post type you want to connect to.\r\n\r\n**You can add just one:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n];\r\n```\r\n\r\n**Or you can add multiple connections:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class,\r\n	\\MrBPlugin\\App\\CustomPostTypes\\AnotherExample::class\r\n];\r\n```\r\n\r\nAgain, the CustomPostType module will handle the configuration of connections automatically, but in some cases you may with to override these defaults. You can do this by providing the connection classname as the array key and an array of the overrides as the value.\r\n\r\n**Overriding the defaults:**\r\n```php\r\npublic static $connections = [\r\n	\\MrBPlugin\\App\\CustomPostTypes\\Example::class => [\r\n		\'name\'  => \'example_to_another_example\', // Default example_to_another-example\r\n		\'from\' => \'the_example\', // Default \'example\'\r\n		\'to\'  => \'another_of_the_examples\', // Default \'another-example\'\r\n		\'reciprocal\' => false, // Default true\r\n		\'sortable\' => false, // Default \'any\'\r\n	],\r\n];\r\n```\r\n\r\n**Note:** You only need to set up a connection in *one* of the two connected post type classes. Adding the connection to both post type classes will result in duplicate connection panels in the admin section for the post type. For example, to connect `Example` with `AnotherExample`, you only need to define the connection in one of those classes, _either_ `Example` _or_ `AnotherExample`.',1,2,'2017-08-25 16:13:39','2017-08-25 16:13:39',NULL,'custom post types,post types');
/*!40000 ALTER TABLE `suggested_edits` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tag` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_badges`
--

DROP TABLE IF EXISTS `user_badges`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_badges` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `badge_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `read` tinyint(1) NOT NULL DEFAULT '0',
  `default` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_badges`
--

LOCK TABLES `user_badges` WRITE;
/*!40000 ALTER TABLE `user_badges` DISABLE KEYS */;
INSERT INTO `user_badges` VALUES (4,1,2,1,0,'2017-08-29 08:51:45','2017-08-29 09:25:48'),(5,5,2,1,0,'2017-08-29 08:52:38','2017-08-29 09:25:48'),(6,6,2,1,0,'2017-08-29 09:48:59','2017-08-29 10:29:52');
/*!40000 ALTER TABLE `user_badges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `default_category_id` int(11) NOT NULL,
  `curator` tinyint(1) NOT NULL DEFAULT '0',
  `remember_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (2,'Hannah Tinkler','hannah.tinkler@mrbandfriends.co.uk','hannah-tinkler',2,0,'UpogEgN793mxIHyhKvchKibuuqrtLLhiiI34S9kbrbabJUdiEfTyKVC4UhiK','2017-08-25 17:06:54','2017-08-29 10:44:04');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-08-29 12:10:44
